---
title: "Chapter 9 - Functionals"
format: html
---

## 9.1 Introduction

```{r}
randomize <- function(f) f(runif(1e3))

randomize(mean)
randomize(mean)
randomize(sum)
```

```{r}
library(purrr)
```

## 9.2 My first functional: `map()`

```{r}
triple <- function(x) x * 3
map(1:3, triple)
```


```{r}
simple_map <- function(x, f, ...) {
    out <- vector("list", length(x))
    for (i in seq_along(x)) {
        out[[i]] <- f(x[[i]], ...)
    }
    out
}
```

### 9.2.1 Producing atomic vectors

```{r}
map_chr(mtcars, typeof)
map_lgl(mtcars, is.double)

n_unique <- \(x) length(unique(x))
map_int(mtcars, n_unique)

map_dbl(mtcars, mean)
```

```{r}
pair <- \(x) c(x, x)
map_dbl(1:2, pair)
```

```{r}
map_dbl(1:2, as.character)
```

```{r}
map(1:2, pair)
map(1:2, as.character)
```

### 9.2.2 Anonymous functions and shortcuts
```{r}
map_dbl(mtcars, \(x) length(unique(x)))
```

```{r}
map_dbl(mtcars, ~ length(unique(.x)))
```

```{r}
as_mapper(~ length(unique(.x)))
```

```{r}
x <- map(1:3, ~ runif(2))
str(x)
```

```{r}
x <- list(
    list(-1, x = 1, y = c(2), z = "a"),
    list(-2, x = 4, y = c(5, 6), z = "b"),
    list(-3, x = 8, y = c(9, 10, 11))
)

map_dbl(x, "x")
map_dbl(x, 1)
map_dbl(x, list("y", 1))
map_chr(x, "z")
map_chr(x, "z", .default = NA)
```

### 9.2.3 Passing arguments with `...`

```{r}
x <- list(1:5, c(1:10, NA))
map_dbl(x, \(x) mean(x, na.rm = TRUE))
```

```{r}
map_dbl(x, mean, na.rm = TRUE)
```

```{r}
plus <- function(x, y) x + y

x <- c(0, 0, 0, 0)
map_dbl(x, plus, runif(1))
map_dbl(x, \(x) plus(x, runif(1)))
```

### 9.2.4 Argument names
```{r}
bootstrap_summary <- function(x, f) {
    f(sample(x, replace = TRUE))
}

simple_map(mtcars, bootstrap_summary, f = mean)
```

### 9.2.5 Varying another argument

```{r}
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(1000)
```

```{r}
map_dbl(trims, \(trim) mean(x, trim = trim))
```

### 9.2.6 Exercises

3. Use the appropriate `map()` function to:

a. Compute the standard deviation of every column in a numeric data frame.
```{r}
map_dbl(mtcars, sd)
```

b. Compute the standard deviation of every numeric columns in a mixed data frame.

```{r}
msleep <- ggplot2::msleep
msleep[, map_chr(msleep, typeof) != "character"] |> 
    map_dbl(sd)
```

c. Compute the number of levels for every factor in a data frame.

```{r}
iris[, map_chr(iris, class) == "factor", drop = FALSE] |>
    map_int(nlevels)
```

4. The following code simulates the performance of a t-test for non-normal data. Extract the p-value from each test then visualize.
```{r}
trials <- map(1:100, \(x) t.test(rpois(10, 10), rpois(7, 10)))
p_values <- map_dbl(trials, "p.value")

library(ggplot2)

data.frame(p_values) |>
    ggplot(aes(x = p_values)) +
    geom_histogram()
```

5. The following code uses a map nested inside another map to apply a function to every element of a nested list. Why does it fail, and what do you need to do to make it work?

```{r}
x <- list(
    list(1, c(3, 9)),
    list(c(3, 6), 7, c(4, 7, 6))
)

triple <- \(x) x * 3
map(x, map, .f = triple)
map(x, map, triple)
```

6. Use `map()` to fit linear models to the `mtcars` dataset using the formulas stored in this list:
```{r}
formulas <- list(
    mpg ~ disp,
    mpg ~ I(1 / disp),
    mpg ~ disp + wt,
    mpg ~ I(1 / disp) + wt
)

linear_models <- map(formulas, lm, data = mtcars)
linear_models <- map(formulas, \(formula) lm(formula, data = mtcars))
```

7. Fit the model `mpg ~ disp` to each of the bootstrap replicates of `mtcars` in the list below, then extract the $R^2$ of the model fit.
```{r}
bootstrap <- function(df) {
    df[sample(nrow(df), replace = TRUE), , drop = TRUE]
}

bootstraps <- map(1:10, \(x) bootstrap(mtcars))
bootstrap_models <- map(bootstraps, \(bootstrap) lm(mpg ~ disp, data = bootstrap))

r_squared_vals <- map_dbl(bootstrap_models, \(model) summary(model)$r.squared)
r_squared_vals
```

## 9.3 Purrr style
```{r}

```